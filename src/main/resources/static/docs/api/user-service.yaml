openapi: 3.0.1
info:
  title: LibrAPI
  termsOfService: http://swagger.io/terms/
  description: ðŸ‘¥ User management system made with SpringBoot. ðŸ’³ Phoebus @paystore
    training project in partnership with @ayty-org
  contact:
    email: pedro.sousa@phoebus.com.br
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
  - name: user-controller
    description: Everything about available users
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080
  - url: http://localhost:8080/v2/docs
paths:
  /v1/api/users/id/{uuid}:
    get:
      tags:
        - user-controller
      summary: Get an existing user by its Specific ID
      operationId: findBySpecificID
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        404:
          description: Not Found. Id must be higher than 0 or specified user ID doesn't exist
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /v1/api/users/all:
    get:
      tags:
        - user-controller
      operationId: findAll
      summary: Gets all users without pagination
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /v1/api/users/:
    get:
      tags:
        - user-controller
      operationId: listPageUser
      summary: Gets all users with pagination
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable'
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /v1/api/users/{id}:
    get:
      tags:
        - user-controller
      summary: Get an existing user by its ID
      operationId: findByID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        404:
          description: Not Found. Id must be higher than 0 or specified user ID doesn't exist
        401:
          description: Unauthorized
        403:
          description: Forbidden
    put:
      tags:
        - user-controller
      operationId: update
      summary: Update an existing user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        204:
          description: No Content
        404:
          description: Not Found. Id must be higher than 0 or specified user ID doesn't exist
        401:
          description: Unauthorized
        403:
          description: Forbidden
    delete:
      tags:
        - user-controller
      operationId: delete
      summary: Delete an existing user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: No Content
        404:
          description: Not Found. Id must be higher than 0 or specified user ID doesn't exist
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /v1/api/users:
    post:
      tags:
        - user-controller
      operationId: save
      summary: Creates a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        201:
          description: Created
        404:
          description: Not Found. Id must be higher than 0 or specified user ID doesn't exist
        401:
          description: Unauthorized
        403:
          description: Forbidden
        409:
          description: Conflict. Already exists an user with specified email or phone

components:
  schemas:
    UserDTO:
      required:
        - age
        - email
        - name
        - phone
        - sex
      type: object
      properties:
        id:
          type: integer
          format: int64
        specificId:
          type: string
          maxLength: 36
        name:
          maxLength: 50
          minLength: 2
          type: string
        age:
          maximum: 2
          minimum: 2
          type: integer
          format: int32
        phone:
          maxLength: 15
          minLength: 8
          type: string
        email:
          type: string
        sex:
          type: string
          enum:
            - MALE
            - FEMALE
            - UNDEFINED
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32